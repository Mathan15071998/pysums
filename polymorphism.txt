                                                Polymorphism

        In programming, Polymorphism means the same function name(but different signatures ) used for different types.
 The key difference is the data types and number of arguments used in function.For instance,
def add(a,b,c=0):
    print(a+b+c)
add(10,40)
add(10,40,20)


"""Create a class called Animal with a method sound()
 that prints "Animal makes a sound." Create a derived class
 called Dog that inherits from Animal and overrides the sound() method to print
 "Dog Barks." Create another derived class called Bird that inherits from
 Animal and overrides the sound() method to print "Birds Sing"."""

class animal():
    def sound(self):
        print("Animal makes a sound")
class dog(animal):
    def sound(self):
        print("Dog barks")
class bird(animal):
    def sound(self):
        print("Birds sing")

a=animal()
a.sound()

b=dog()
b.sound()

c=bird()
c.sound()- this is also known as Polymorphism because one function overides another function based on the
location of the class.



"""Create a base class called Shape with a method area() taht returns 0.
Create a derived class called Rectangle that inherits from Shape and overrides the area() method to calculate and return
the area of rectangle"""


class shape():
    def area(self):
        return 0

class rectangle(shape):
    def area(self):
        length=10
        breath=20
        area=length*breath
        print(area)
r1=rectangle()
r1.area()


"""create a base class called person with a constructor
that takes a name as a parameter. Create a derived class called student
that inherits from person and has a constructor that takes a parameter called grade.
Write a method in student to display the name and the grade of the student. Use this by using the
super keyword in python."""

class person():
    def __init__(self,name):
        self.name=name
class student(person):
    def __init__(self,name,grade):
        super().__init__(name)
        self.grade=grade
        print("Name: ",self.name)
        print("Grade: ",self.grade)
s1=student("Mathan","A")


"""create a base class called vehicle with a method stat() that prints
"vehicles started". create a derived class called car that inherits from vehicle and
overrides the start() method to print "car started"."""

class vehicle():
    def start(self):
        print("Vehicles started")
class car(vehicle):
    def start(self):
        print("Car started")
c=car()
c.start()

"""create a base class called employee with properties name and salary. create a
derived class called
manager that inherits from employee and adds a property department.
Write a method in manager to display the name, salary,
and department of the manager"""

class employee():
    def __init__(self,name,salary):
        self.name=name
        self.salary=salary
class manager(employee):
    def __init__(self,name,salary,department):
        super().__init__(name,salary)
        self.department=department
    def display(self):
        print("Name: ",self.name)
        print("salary: ",self.salary)
        print("department: ",self.department)
m=manager("Mathan",500000,"Developer")
m.display()


